[{"path":"https://giocomai.github.io/rbackupr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Giorgio Comai Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://giocomai.github.io/rbackupr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giorgio Comai. Author, maintainer.","code":""},{"path":"https://giocomai.github.io/rbackupr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Comai G (2023). rbackupr: R package backup folders Google Drive limited permissions. R package version 0.1.0.9001, https://giocomai.github.io/rbackupr/.","code":"@Manual{,   title = {rbackupr: An R package to backup folders to Google Drive with limited permissions},   author = {Giorgio Comai},   year = {2023},   note = {R package version 0.1.0.9001},   url = {https://giocomai.github.io/rbackupr/}, }"},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"rbackupr","dir":"","previous_headings":"","what":"An R package to backup folders to Google Drive with limited permissions ","title":"An R package to backup folders to Google Drive with limited permissions ","text":"goal rbackupr facilitate online backups Google Drive R. Key features: uses requires limited permission (files created app, Google Drive) caches metadata locally speedy updates allows easy management multiple backups based idea “projects” located top level folder top level folder local disk can moved, read somewhere else: paths relative base folder allows backups recursively (e.g. deeply nested folders), makes easy include contents (e.g. “.csv” files subfolders bunch files) Warning: finalised testing documentation, seems work expected stage. Given , default, requests access files created , mostly safe use. course, make sure fit () purpose. Consider creating Google App (see ).","code":""},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"core-motivation","dir":"","previous_headings":"","what":"Core motivation","title":"An R package to backup folders to Google Drive with limited permissions ","text":"default, use googledrive package give access Google Drive. number shortcomings, particular use Google Drive different reasons many files folders stored : going thrhough lot files, googledrive slow finding need particular use googledrive remote server, may feel unconfortable potentially leaving open door files stored even use locally, may concerned mistakes make giving full access files scripts written , packages published random GitHub user (author package) can give full access Google Drive wish, rbackupr developed based expectation access “drive.file” scope Google Drive, .e. “access files created opened app”. brief, course still need trust scripts running, least can sure mess completely unrelated files keep Google Drive. See screenshot Google authentication prompt, clear give rbackupr access “specific Google Drive files use app.”  order reduce impact issues come choice, app caches locally metadata remote folders files order speed processing. additional benefit rbackupr agnostic location base folder, stores relative path: possible keep folder date different locations, move folder updated without issues.","code":""},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package to backup folders to Google Drive with limited permissions ","text":"can install development version rbackupr GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"giocomai/rbackupr\")"},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use","title":"An R package to backup folders to Google Drive with limited permissions ","text":"order show package works, first create files random data temporary folder. base folder looks like: main folder, sub-folders, files within . default, rbackupr cache metadata files folders stores Google Drive, strongly encouraged . can rb_enable_cache(). default, metadata cached current active directory, use rbackupr different projects, may want leave files cached metadata scattered around local drive, rather keep place can accessed. Something like typically included beginning rbackupr backup scripts. reduce mixing files uploaded rbackupr files likely Google Drive, files folders stored base folder, default called “rbackupr”. can call base folder something else, can one base folder, ’re probably fine just keeping defaults. base folder, “project” folder, folder, actually files related project. matter full path files hard drive, folder set backup correspond project folder. first step need take, set project current session, actually create folder Google Drive, doesn’t yet exist. stage, among files folder Google Drive, expect find folder called rbackupr default (can customise rb_drive_create_project()). Within folder, find another folder, rbackupr_testing (one set project). files backup now current session located folder. Notice since giving drive.file scope, .e. access files folders created current app, run googledrive::drive_ls() see two folders nothing else. following steps based basic idea caching locally key information online resources stored Google Drive helpful particular considering fact many files, retrieving just full file list Google Drive check needs uploaded can extremely time-consuming. local cache, simplicity, data part dribble stored. base folder, projects expected located, name dribble id stored. Indeed, “parent folder”. Even projects expected located single base folder, local cache stores also id base folder parent_id. project folder, real folders files part backup stored. can see folders included base project : , files, details stored cache, including:","code":"library(\"rbackupr\") base_temp_folder <- fs::dir_create(fs::path(tempdir(),                                             \"rbackupr_testing\"))  subfolder_names <- stringr::str_c(\"data_\",                                   sample(x = 10:100, size = 3, replace = FALSE))  purrr::walk(   .x = subfolder_names,   .f = function(x) {     current_folder <- fs::path(base_temp_folder, x)     fs::dir_create(path = current_folder)     current_number <- stringr::str_extract(string = x, pattern = \"[[:digit:]]+\") %>%        as.numeric()          purrr::walk(       .x = rep(NA, sample(x = 2:5, size = 1)),       .f = function(x){         readr::write_csv(x = tibble::tibble(numbers = rnorm(n = 10, mean = current_number)),                           file = fs::file_temp(pattern = stringr::str_c(\"spreadsheet_\", current_number, \"_\"),                                               tmp_dir = current_folder,                                               ext = \"csv\"))       })   })   fs::dir_tree(base_temp_folder) #> /tmp/RtmpIEtxRk/rbackupr_testing #> ├── data_34 #> │   ├── spreadsheet_34_5c3240af716c.csv #> │   └── spreadsheet_34_5c327bd86062.csv #> ├── data_58 #> │   ├── spreadsheet_58_5c321440281a.csv #> │   ├── spreadsheet_58_5c322a1153ef.csv #> │   └── spreadsheet_58_5c3255ec915a.csv #> └── data_74 #>     ├── spreadsheet_74_5c323393fef0.csv #>     ├── spreadsheet_74_5c323a007f8f.csv #>     └── spreadsheet_74_5c324c0587d5.csv library(\"rbackupr\") rb_enable_cache()  rb_set_cache_folder(path = fs::path(fs::path_home_r(),                                     \"R\",                                     \"rb_data\"))  rb_create_cache_folder(ask = FALSE) rb_set_project(project = \"rbackupr_testing\") # this will set the project for the current session rb_drive_auth() rb_get_project(create = TRUE) # if it already exists, it just returns its dribble rb_drive_find_base_folder() #> # A tibble: 1 × 2 #>   name     id                                #>   <chr>    <drv_id>                          #> 1 rbackupr 1DFtFrmrV1_szp3NrbuWkq45FzozFwzOy rb_get_project() #> # A tibble: 1 × 3 #>   name             id                                parent_id                   #>   <chr>            <drv_id>                          <chr>                       #> 1 rbackupr_testing 1inLe1aYhbKbIOUPnjPih9J-Z3q8mH-bw 1DFtFrmrV1_szp3NrbuWkq45Fz… rb_get_project() %>%    rb_get_folders() #> # A tibble: 11 × 4 #>    name           id                                parent_id      relative_path #>    <chr>          <drv_id>                          <drv_id>       <fs::path>    #>  1 data_34        1-KA38B0xhXstirvcWjQ21QMg3sjer38h 1inLe1aYhbKbI… data_34       #>  2 data_58        1WwA25vkN_tyT1v3i-q5YTVEDNicRy5n5 1inLe1aYhbKbI… data_58       #>  3 data_74        1gqeIudhtbR3qgP5uwDrHslRITg3AeHps 1inLe1aYhbKbI… data_74       #>  4 data_detail_43 1K7ehxCNDr06nAL-EaRw31aOFgdFLyPwK 1-KA38B0xhXst… …ta_detail_43 #>  5 data_detail_46 1KgQk30czp4iaGTD0Lo_sAixkHsjDnwjA 1-KA38B0xhXst… …ta_detail_46 #>  6 data_detail_52 1HyAfKdBBYBZCmJfkI_WXFw3UlpOdI9tr 1WwA25vkN_tyT… …ta_detail_52 #>  7 data_detail_89 1DF-OYIGd6IBNYq7y93hBVUdaqS1PGeQF 1WwA25vkN_tyT… …ta_detail_89 #>  8 data_detail_40 1QALXJAE5n1UTvtzhPLxwQ9ndqaSu7o_n 1gqeIudhtbR3q… …ta_detail_40 #>  9 data_detail_71 1SDIjSc0nwAoBJjc3HPftBYNvnA78KnMd 1gqeIudhtbR3q… …ta_detail_71 #> 10 deeper         1DE6FD_5-oMvml4LoR6ps3PZUOK5HM3bo 1DF-OYIGd6IBN… …il_89/deeper #> 11 much deeper    1YI1HQgufmFGafw7mHiTFHhyrrZFYNv7e 1DE6FD_5-oMvm… …/much deeper rb_get_project() %>%    rb_get_folders() %>%    dplyr::slice(1) %>%    rb_get_files() #> # A tibble: 4 × 11 #>   name                  id    mimeType createdTime modifiedTime originalFilename #>   <chr>                 <drv> <chr>    <chr>       <chr>        <chr>            #> 1 spreadsheet_34_b0861… 1eBN… text/csv 2022-02-27… 2022-02-27T… spreadsheet_34_… #> 2 spreadsheet_34_b0867… 1Oh_… text/csv 2022-02-27… 2022-02-27T… spreadsheet_34_… #> 3 spreadsheet_34_4fef6… 1C9E… text/csv 2022-03-01… 2022-03-01T… spreadsheet_34_… #> 4 spreadsheet_34_4fef7… 1Be3… text/csv 2022-03-01… 2022-03-01T… spreadsheet_34_… #> # … with 5 more variables: fullFileExtension <chr>, size <chr>, #> #   md5Checksum <chr>, parent_id <drv_id>, rbackupr_cache_time <dbl>"},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"creating-your-own-app","dir":"","previous_headings":"","what":"Creating your own app","title":"An R package to backup folders to Google Drive with limited permissions ","text":"details creating app see particular: get API credentials Bring OAuth app API key Creating app many benefits; importantly: ’re control (well, Google ultimately always control, least ’s just ) don’t risk hitting rate limiting user busy app Ultimately, rbackupr relies gargle authentication, can still follow relevant documentation set settings.","code":"# See ?gargle_oauth_cache()  options(   gargle_oauth_email = \"jane@example.com\",   gargle_oauth_cache = \"/path/to/folder/that/does/not/sync/to/cloud\" )"},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"database-cache-structure","dir":"","previous_headings":"","what":"Database cache structure","title":"An R package to backup folders to Google Drive with limited permissions ","text":"local SQLite database created caching following structure: table details “base_folder” (“rbackupr_base_folder”). may well single row many common use cases. table details project folders (“rbackupr_projects”). one row per project created. one table folders one files project. called “rbackupr_folders_ProjectName” “rbackupr_files_ProjectName”, “ProjectName” name project, typically set rb_set_project().","code":""},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"things-to-keep-in-mind","dir":"","previous_headings":"","what":"Things to keep in mind","title":"An R package to backup folders to Google Drive with limited permissions ","text":"authenticated, can still use googledrive. Keep mind things may work expected, due restricted access Google Drive given app. example, listing files googledrive::drive_ls() list files created app.","code":""},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"dockerfile","dir":"","previous_headings":"","what":"Dockerfile","title":"An R package to backup folders to Google Drive with limited permissions ","text":"repository includes Dockerfile. created dockerfiler::dock_from_desc().","code":""},{"path":"https://giocomai.github.io/rbackupr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"An R package to backup folders to Google Drive with limited permissions ","text":"Released MIT license.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://giocomai.github.io/rbackupr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_add_file_to_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Add file to cache — rb_add_file_to_cache","title":"Add file to cache — rb_add_file_to_cache","text":"Add file cache","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_add_file_to_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add file to cache — rb_add_file_to_cache","text":"","code":"rb_add_file_to_cache(dribble, parent_id, project = NULL)"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_add_file_to_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add file to cache — rb_add_file_to_cache","text":"dribble dribble. parent_id Identifier parent folder project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_add_folder_to_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Add folder to cache — rb_add_folder_to_cache","title":"Add folder to cache — rb_add_folder_to_cache","text":"Add folder cache","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_add_folder_to_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add folder to cache — rb_add_folder_to_cache","text":"","code":"rb_add_folder_to_cache(   dribble,   parent_id,   relative_path,   project = NULL,   cache = TRUE )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_add_folder_to_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add folder to cache — rb_add_folder_to_cache","text":"dribble dribble. parent_id Identifier parent folder. relative_path Path relative base folder. project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_backup.html","id":null,"dir":"Reference","previous_headings":"","what":"Backup files — rb_backup","title":"Backup files — rb_backup","text":"Backup files","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_backup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Backup files — rb_backup","text":"","code":"rb_backup(   path,   project = NULL,   first_level_folders = NULL,   first_level_files = TRUE,   max_level = 100,   recurse = TRUE,   glob = NULL,   create = TRUE,   update = FALSE,   cache = TRUE,   base_folder = \"rbackupr\" )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_backup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Backup files — rb_backup","text":"path Local path files backup stored. project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project. first_level_folders Defaults NULL. given, clarifies folders within path uploaded, keeping folder structure. first_level_files Logical, defaults TRUE. FALSE, first level files (files directly project folder, rather subfolder) included backup. max_level Defaults 100. Maximum level sub-folders backup. Default means go 100 times deep sub-folders. Used also prevent infinite loops. recurse Defaults TRUE. Recurse one level. glob Defaults NULL. Can used filter type files upload, e.g. \"*.jpg\" create Logical, defaults TRUE. Create folders missing. Set FALSE sure new folders raise error something unexpected happens. update Logical, defaults FALSE. TRUE, checks Google Drive newly updated files folders, otherwise assumes files folders listed cache exist online. cache Logical, defaults TRUE. Stores locally cached information base project folder. base_folder Name base folder, defaults `rbackupr`","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_backup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Backup files — rb_backup","text":"","code":"if (FALSE) { if (interactive()) {   rb_backup(path = \"folder_to_backup\", project = \"test_project\") } }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Check caching status in the current session, and override it upon request — rb_check_cache","title":"Check caching status in the current session, and override it upon request — rb_check_cache","text":"Mostly used internally functions, exported reference.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check caching status in the current session, and override it upon request — rb_check_cache","text":"","code":"rb_check_cache(cache = NULL)"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check caching status in the current session, and override it upon request — rb_check_cache","text":"cache Defaults NULL. NULL, checks current cache settings. given, returns given value, ignoring cache.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check caching status in the current session, and override it upon request — rb_check_cache","text":"Either TRUE FALSE, depending current cache settings.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check caching status in the current session, and override it upon request — rb_check_cache","text":"","code":"# \\donttest{ if (interactive()) {   rb_check_cache() } # }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if cache folder exists, if not returns an informative message — rb_check_cache_folder","title":"Checks if cache folder exists, if not returns an informative message — rb_check_cache_folder","text":"Checks cache folder exists, returns informative message","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if cache folder exists, if not returns an informative message — rb_check_cache_folder","text":"","code":"rb_check_cache_folder()"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if cache folder exists, if not returns an informative message — rb_check_cache_folder","text":"cache folder exists, returns TRUE. Otherwise throws error.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_check_cache_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if cache folder exists, if not returns an informative message — rb_check_cache_folder","text":"","code":"# If cache folder does not exist, it throws an error tryCatch(rb_check_cache_folder(),   error = function(e) {     return(e)   } ) #> <usethis_error: Cache folder does not exist. Set it with `rb_get_cache_folder()` and create it with `rb_create_cache_folder()`>  # Create cache folder rb_set_cache_folder(path = fs::path(   tempdir(),   \"rb_cache_folder\" )) #>                      cache_folder  #> \"/tmp/RtmpRpF8Cy/rb_cache_folder\"  rb_create_cache_folder(ask = FALSE)  rb_check_cache_folder() #> [1] TRUE"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_create_cache_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates the base cache folder where `rbackupr` caches data. — rb_create_cache_folder","title":"Creates the base cache folder where `rbackupr` caches data. — rb_create_cache_folder","text":"Creates base cache folder `rbackupr` caches data.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_create_cache_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates the base cache folder where `rbackupr` caches data. — rb_create_cache_folder","text":"","code":"rb_create_cache_folder(ask = TRUE)"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_create_cache_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates the base cache folder where `rbackupr` caches data. — rb_create_cache_folder","text":"ask Logical, defaults TRUE. FALSE, cache folder exist, just creates without asking (useful non-interactive sessions).","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_create_cache_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates the base cache folder where `rbackupr` caches data. — rb_create_cache_folder","text":"Nothing, used side effects.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_create_cache_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates the base cache folder where `rbackupr` caches data. — rb_create_cache_folder","text":"","code":"# \\donttest{ if (interactive()) {   rb_create_cache_folder() } # }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_disable_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Disable caching for the current session — rb_disable_cache","title":"Disable caching for the current session — rb_disable_cache","text":"Disable caching current session","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_disable_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disable caching for the current session — rb_disable_cache","text":"","code":"rb_disable_cache()"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_disable_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disable caching for the current session — rb_disable_cache","text":"Nothing, used side effects.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_disable_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disable caching for the current session — rb_disable_cache","text":"","code":"rb_disable_cache()"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up app and scope for the current session — rb_drive_auth","title":"Set up app and scope for the current session — rb_drive_auth","text":"Set app scope current session","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up app and scope for the current session — rb_drive_auth","text":"","code":"rb_drive_auth(   client = NULL,   scopes = \"https://www.googleapis.com/auth/drive.file\",   email = gargle::gargle_oauth_email(),   cache = gargle::gargle_oauth_cache(),   use_oob = gargle::gargle_oob_default(),   path = NULL,   token = NULL )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up app and scope for the current session — rb_drive_auth","text":"client Google client. See example, dedicated gargle documentation. scopes Defaults `https://www.googleapis.com/auth/drive.file`. See Google api documentation details email Optional. specified, email can take several different forms: \"jane@gmail.com\", .e. actual email address. allows user target specific Google identity. specified, used token lookup, .e. determine suitable token already available cache. token found, email used pre-select targeted Google identity OAuth chooser. (Note, however, email associated token cached always determined token , never argument). \"*@example.com\", .e. domain-glob pattern. can helpful need code \"just works\" alice@example.com bob@example.com. TRUE means approving email auto-discovery. exactly one matching token found cache, used. FALSE NA mean want ignore token cache force new OAuth dance browser. Defaults option named \"gargle_oauth_email\", retrieved gargle_oauth_email() (unless wrapper package implements different default behavior). cache Specifies OAuth token cache. Defaults option named \"gargle_oauth_cache\", retrieved via gargle_oauth_cache(). use_oob Whether use --band authentication (, perhaps, variant implemented gargle known \"pseudo-OOB\") first acquiring token. Defaults value returned gargle_oob_default(). Note (pseudo-)OOB auth affects initial OAuth dance. retrieve (possibly refresh) cached token, use_oob effect. OAuth client provided implicitly wrapper package, type probably defaults value returned gargle_oauth_client_type(). can take control client type setting options(gargle_oauth_client_type = \"web\") options(gargle_oauth_client_type = \"installed\"). path JSON identifying service account, one forms supported txt argument jsonlite::fromJSON() (typically, file path JSON string). token token class Token2.0 object httr's class request, .e. token prepared httr::config() Token2.0 auth_token component.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up app and scope for the current session — rb_drive_auth","text":"Nothing, used side effects, .e. logging Google account.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up app and scope for the current session — rb_drive_auth","text":"","code":"if (interactive()) {   google_client <- httr::oauth_app(     \"my-very-own-google-app\",     key = \"123456789.apps.googleusercontent.com\",     secret = \"abcdefghijklmnopqrstuvwxyz\"   )   rb_drive_auth(google_client) }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_create_folders.html","id":null,"dir":"Reference","previous_headings":"","what":"Create missing folders and get data frame with identifiers of all given folders — rb_drive_create_folders","title":"Create missing folders and get data frame with identifiers of all given folders — rb_drive_create_folders","text":"Create missing folders get data frame identifiers given folders","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_create_folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create missing folders and get data frame with identifiers of all given folders — rb_drive_create_folders","text":"","code":"rb_drive_create_folders(   folders,   parent_id,   relative_path = NULL,   project = NULL,   update = FALSE,   base_folder = \"rbackupr\",   cache = TRUE )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_create_folders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create missing folders and get data frame with identifiers of all given folders — rb_drive_create_folders","text":"folders character vector folder names. parent_id Identifier parent folder, new folders created. project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project. update Logical, defaults FALSE. TRUE, checks Google Drive newly updated files folders, otherwise assumes files folders listed cache exist online.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_create_folders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create missing folders and get data frame with identifiers of all given folders — rb_drive_create_folders","text":"","code":"if (interactive()) {   rb_drive_create_folders(     folders = c(\"folder_a\", \"folder_b\"),     parent_id = rb_get_project()   ) }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_base_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or get base folder — rb_drive_find_base_folder","title":"Create or get base folder — rb_drive_find_base_folder","text":"Create get base folder","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_base_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or get base folder — rb_drive_find_base_folder","text":"","code":"rb_drive_find_base_folder(   base_folder = \"rbackupr\",   create = FALSE,   cache = TRUE )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_base_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or get base folder — rb_drive_find_base_folder","text":"base_folder Name base folder, defaults \"rbackupr\". create Defaults FALSE. set TRUE, folder create found. cache Logical, defaults TRUE. Can se NULL, managed `rb_enable_cache()` / `rb_disable_cache()`","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_base_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or get base folder — rb_drive_find_base_folder","text":"","code":"if (FALSE) { if (interactive()) {   rb_drive_find_base_folder() } }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Create rbackupr project — rb_drive_find_project","title":"Create rbackupr project — rb_drive_find_project","text":"Create rbackupr project","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create rbackupr project — rb_drive_find_project","text":"","code":"rb_drive_find_project(   project = NULL,   base_folder = \"rbackupr\",   create = TRUE,   cache = TRUE )  rb_drive_create_project(   project = NULL,   base_folder = \"rbackupr\",   create = TRUE,   cache = TRUE )  rb_get_project(   project = NULL,   base_folder = \"rbackupr\",   create = TRUE,   cache = TRUE )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create rbackupr project — rb_drive_find_project","text":"project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project. create Logical, defaults TRUE. Creates folder existing.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create rbackupr project — rb_drive_find_project","text":"dribble corresponding project folder.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_drive_find_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create rbackupr project — rb_drive_find_project","text":"","code":"if (FALSE) { if (interactive()) {   rb_drive_find_project(project = \"example\") } }  if (FALSE) { if (interactive()) { rb_drive_create_project(project = \"example\") } } rb_get_project(project = \"example\") #> Error in drive_auth(): Can't get Google credentials. #> ℹ Are you running googledrive in a non-interactive session? Consider: #> • Call `drive_deauth()` to prevent the attempt to get credentials. #> • Call `drive_auth()` directly with all necessary specifics. #> ℹ See gargle's \"Non-interactive auth\" vignette for more details: #> ℹ <https://gargle.r-lib.org/articles/non-interactive-auth.html>"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_enable_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable caching for the current session — rb_enable_cache","title":"Enable caching for the current session — rb_enable_cache","text":"Enable caching current session","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_enable_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable caching for the current session — rb_enable_cache","text":"","code":"rb_enable_cache()"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_enable_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enable caching for the current session — rb_enable_cache","text":"Nothing, used side effects.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_enable_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable caching for the current session — rb_enable_cache","text":"","code":"rb_enable_cache()"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets location of cache file — rb_get_cache_file","title":"Gets location of cache file — rb_get_cache_file","text":"Gets location cache file","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets location of cache file — rb_get_cache_file","text":"","code":"rb_get_cache_file(   filename = \"rbackupr_cache.sqlite\",   cache_folder = rbackupr::rb_get_cache_folder() )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets location of cache file — rb_get_cache_file","text":"filename Defaults \"rbackupr_cache.sqlite\". cache_folder Defaults folder set `rb_set_cache_folder()`","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets location of cache file — rb_get_cache_file","text":"character vector length one location item cache file.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets location of cache file — rb_get_cache_file","text":"","code":"rb_set_cache_folder(path = tempdir()) #>      cache_folder  #> \"/tmp/RtmpRpF8Cy\"  sqlite_cache_file_location <- rb_get_cache_file() # outputs location of cache file sqlite_cache_file_location #> /tmp/RtmpRpF8Cy/rbackupr_cache.sqlite"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_table_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets name of table inside the database — rb_get_cache_table_name","title":"Gets name of table inside the database — rb_get_cache_table_name","text":"Gets name table inside database","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_table_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets name of table inside the database — rb_get_cache_table_name","text":"","code":"rb_get_cache_table_name(   type = \"project\",   project = rbackupr::rb_get_project_name() )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_table_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets name of table inside the database — rb_get_cache_table_name","text":"type Defaults \"project\". Type cache file output. Values typically used `rbackupr` include \"base_folder\", \"projects\", \"project\". project Defaults project name set `rbackupr::rb_get_project_name()`. Ignored parameter type set \"project\"","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_table_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets name of table inside the database — rb_get_cache_table_name","text":"character vector length one name relevant table   cache file.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_cache_table_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets name of table inside the database — rb_get_cache_table_name","text":"","code":"# outputs name of table used in the cache database rb_get_cache_table_name(type = \"project\", language = \"testing_project\") #> Error in rb_get_cache_table_name(type = \"project\", language = \"testing_project\"): unused argument (language = \"testing_project\")"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if new files appeared inside an online folder — rb_get_files","title":"Check if new files appeared inside an online folder — rb_get_files","text":"Check new files appeared inside online folder","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if new files appeared inside an online folder — rb_get_files","text":"","code":"rb_get_files(dribble_id, update = FALSE, project = NULL, cache = TRUE)"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if new files appeared inside an online folder — rb_get_files","text":"dribble_id dribble identifier folder Google Drive. update Logical, defaults FALSE. TRUE, checks Google Drive newly updated folders. project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project. cache Logical, defaults TRUE. Stores locally cached information base project folder.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if new files appeared inside an online folder — rb_get_files","text":"data frame three columns: name (folder), id (  dribble folder), parent_id (dribble id parent folder)","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if new files appeared inside an online folder — rb_get_files","text":"","code":"if (interactive()) {   rb_get_files(rb_drive_find_project()) }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folder_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets folder name based on id — rb_get_folder_name","title":"Gets folder name based on id — rb_get_folder_name","text":"Gets folder name based id","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folder_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets folder name based on id — rb_get_folder_name","text":"","code":"rb_get_folder_name(dribble_id, project = NULL, base_folder = \"rbackupr\")"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folder_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets folder name based on id — rb_get_folder_name","text":"dribble_id dribble identifier folder Google Drive. project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project. base_folder Name base folder, defaults `rbackupr` cache Logical, defaults TRUE. Stores locally cached information base project folder.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folder_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets folder name based on id — rb_get_folder_name","text":"data frame three columns: name (folder), id (  dribble folder), parent_id (dribble id parent folder)","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folder_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets folder name based on id — rb_get_folder_name","text":"","code":"if (interactive()) {   rb_get_folder_name(rb_drive_find_project()) }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folders.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets cached folder with given parent, or update them from Google Drive upon\nrequest — rb_get_folders","title":"Gets cached folder with given parent, or update them from Google Drive upon\nrequest — rb_get_folders","text":"Gets cached folder given parent, update Google Drive upon request","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets cached folder with given parent, or update them from Google Drive upon\nrequest — rb_get_folders","text":"","code":"rb_get_folders(   dribble_id,   update = FALSE,   project = NULL,   base_folder = \"rbackupr\",   cache = TRUE )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets cached folder with given parent, or update them from Google Drive upon\nrequest — rb_get_folders","text":"dribble_id dribble identifier folder Google Drive. update Logical, defaults FALSE. TRUE, checks Google Drive newly updated folders. project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project. cache Logical, defaults TRUE. Stores locally cached information base project folder.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets cached folder with given parent, or update them from Google Drive upon\nrequest — rb_get_folders","text":"data frame three columns: name (folder), id (  dribble folder), parent_id (dribble id parent folder)","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_folders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets cached folder with given parent, or update them from Google Drive upon\nrequest — rb_get_folders","text":"","code":"if (interactive()) {   rb_get_folders(rb_drive_find_project()) }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_parent_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets parent id of a given folder — rb_get_parent_folder","title":"Gets parent id of a given folder — rb_get_parent_folder","text":"Gets parent id given folder","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_parent_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets parent id of a given folder — rb_get_parent_folder","text":"","code":"rb_get_parent_folder(dribble_id, project = NULL, base_folder = \"rbackupr\")"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_parent_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets parent id of a given folder — rb_get_parent_folder","text":"dribble_id dribble identifier folder Google Drive. project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project. cache Logical, defaults TRUE. Stores locally cached information base project folder.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_parent_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets parent id of a given folder — rb_get_parent_folder","text":"data frame three columns: name (folder), id (  dribble folder), parent_id (dribble id parent folder)","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_parent_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets parent id of a given folder — rb_get_parent_folder","text":"","code":"if (interactive()) {   rb_get_parent_folder(rb_drive_find_project()) }"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_relative_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get relative path in local folder from identifier — rb_get_relative_path","title":"Get relative path in local folder from identifier — rb_get_relative_path","text":"Based cached data-","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_relative_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get relative path in local folder from identifier — rb_get_relative_path","text":"","code":"rb_get_relative_path(   dribble_id,   project = NULL,   max_level = 100,   base_folder = \"rbackupr\" )"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_get_relative_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get relative path in local folder from identifier — rb_get_relative_path","text":"dribble_id dribble identifier folder Google Drive. project Defaults NULL. Can set per session `rb_get_project_name()`. given, must character vector length one: name project. max_level Defaults 100. Maximum level sub-folders backup. Default means go 100 times deep sub-folders. Used also prevent infinite loops. base_folder Name base folder, defaults `rbackupr`","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_cache_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Set folder for caching data — rb_set_cache_folder","title":"Set folder for caching data — rb_set_cache_folder","text":"Consider using folder current project directory, e.g. `rb_set_cache_folder(\"~/R/rbackupr_data/\")`: able use cache different projects, prevent cached files sync-ed use services Nextcloud Dropbox.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_cache_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set folder for caching data — rb_set_cache_folder","text":"","code":"rb_set_cache_folder(path = NULL)  rb_get_cache_folder(path = NULL)"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_cache_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set folder for caching data — rb_set_cache_folder","text":"path path location used caching data. folder exist, created.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_cache_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set folder for caching data — rb_set_cache_folder","text":"path caching folder, previously set; path   given function; default, `rbackupr_data` none given.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_cache_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set folder for caching data — rb_set_cache_folder","text":"","code":"# \\donttest{ if (interactive()) {   rb_set_cache_folder(fs::path(fs::path_home_r(), \"R\", \"rbackupr_data\")) } # } rb_get_cache_folder() #>      cache_folder  #> \"/tmp/RtmpRpF8Cy\""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Set (or get) name of project for the current session. — rb_set_project","title":"Set (or get) name of project for the current session. — rb_set_project","text":"Set (get) name project current session.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set (or get) name of project for the current session. — rb_set_project","text":"","code":"rb_set_project(project = NULL)  rb_get_project_name(project = NULL)"},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set (or get) name of project for the current session. — rb_set_project","text":"project Defaults NULL. given, must character vector length one. Name project. used root folder current project, located `base_folder` Google Drive.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set (or get) name of project for the current session. — rb_set_project","text":"project name, previously set; input NULL;   default, `rbackupr_data` none given.","code":""},{"path":"https://giocomai.github.io/rbackupr/reference/rb_set_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set (or get) name of project for the current session. — rb_set_project","text":"","code":"rb_set_project(project = \"weather_csv_files\") #>             project  #> \"weather_csv_files\"  rb_get_project_name() #>             project  #> \"weather_csv_files\""},{"path":[]},{"path":"https://giocomai.github.io/rbackupr/news/index.html","id":"id_02-only-implemented-features-listed-development-version","dir":"Changelog","previous_headings":"","what":"0.2 (only implemented features listed)","title":"rbackupr (development version)","text":"updated internals reflect deprecation google apps gargle","code":""},{"path":"https://giocomai.github.io/rbackupr/news/index.html","id":"id_01-development-version","dir":"Changelog","previous_headings":"","what":"0.1","title":"rbackupr (development version)","text":"first reasonably functional version","code":""}]
